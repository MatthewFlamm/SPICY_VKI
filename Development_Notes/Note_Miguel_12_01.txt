
Hello guys,

I start putting things together.

Currently, the main class contains a lot of functions which have repetition.

For example, the procedure to solve the system in the classic form A, B, C, D appears multiple times 
(in the regression of velocities, in the pressure computations etc).

This will make the documentation in sphinx also more difficult.

I propose that we proceed as follows:

1. The initialization __Init__ defines the kind of analysis at hand ( a bit of what we have, but with slightly more restructuring).
   Here we will allow for 4 'models':

   1. 'scalar', to regress a scalar quantity.
   2. 'laminar', to regress the velocity field without turbulence modeling.
   3.  'RANSI', to regress a velocity field with a RANS model assuming isotropic Reynolds stresses (hence mean(u'**2)) is the only extra expected quantity.
                This must be provided as the fourth entry of 'velocities', which becomes
   4.  'RANSA', to regress a velocity field with a RANS model without assuming isotropic Reynolds stresses.
                This becomes [uu, vv, uv] in 2D and [uu, vv, ww, uv, uw, vw] in 3D.	

2. Inside the main class we have only general function, which have their specificity depending on the 'model' and the dimension at hand.
The macro-steps I see are:

1. Clustering (this does not depend on the model, but only on the dimension).

2. Constraints (this depends on everything)

3. Assembly A, B, C(this depends on everything)

4. Solve ( this is universal, given A, B, C, etc...)

5. Plots and extrapolate (this depends on everything)



Path: I would start implementing the 4 models 1 by 1 and testing them on a simple example, which then becomes a jupyter notebook for the repository.

Work in pregress: the implementation/transposition of all features related to `scalar'